class CustomerDecorator < ApplicationDecorator
  decorates :customer

  def twitter_link
    if customer.twitter_name.present?
      h.link_to "@" + customer.twitter_name, "http://twitter.com/#!/#{customer.twitter_name}"
    else
      "N / A"
    end
  end

  def phone_number
    if customer.login
      "+#{customer.fon_country} (0)#{customer.fon_city} - #{customer.fon}"
    else
      "N / A"
    end
  end

  def name
    customer.first_name + " " +  customer.last_name
  end

  def email
    customer.is_company ? customer.email : "N / A"
  end

  def headline
    login_status = customer.login ? "(is in)" : "(is out)"
    if customer.is_company
      "Company: #{customer.username.upcase} #{login_status}"
    else
      "User: #{customer.username.downcase} #{login_status}"
    end
  end

  def image
    if customer.image.present?
      customer.image
    else
      "rails.png"
    end
  end

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by calling this method:
  #     lazy_helpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, time.strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end
end

